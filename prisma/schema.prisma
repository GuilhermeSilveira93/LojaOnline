generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  nome      String
  email     String   @unique
  senhaHash String
  role      Role
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pedidos Pedido[] @relation("VendedorPedidos")

  carrinho Carrinho?
}

model Produto {
  id                 String   @id @default(uuid())
  nome               String   @unique()
  descricao          String?
  precoBase          Decimal  @db.Decimal(10, 2)
  descontoPercentual Int      @default(0)
  estoque            Int      @default(0)
  ativo              Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  itens        PedidoItem[]
  CarrinhoItem CarrinhoItem[]
}

model Cliente {
  id        String    @id @default(uuid())
  nome      String
  email     String
  documento String
  telefone  String?
  endereco  Endereco?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  Pedido Pedido[]
}

model Endereco {
  id          String  @id @default(uuid())
  rua         String
  numero      String
  complemento String?
  bairro      String
  cidade      String
  uf          String
  cep         String

  id_cliente String  @unique
  Cliente    Cliente @relation(fields: [id_cliente], references: [id], onDelete: Cascade)
}

model Pedido {
  id            String       @id @default(uuid())
  clienteId     String
  vendedorId    String
  status        PedidoStatus @default(CRIADO)
  totalBruto    Decimal      @db.Decimal(10, 2)
  totalDesconto Decimal      @db.Decimal(10, 2)
  totalLiquido  Decimal      @db.Decimal(10, 2)
  pagamento     Pagamento?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  Cliente    Cliente      @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  User       User         @relation("VendedorPedidos", fields: [vendedorId], references: [id])
  PedidoItem PedidoItem[]
}

model PedidoItem {
  id                    String  @id @default(uuid())
  pedidoId              String
  produtoId             String
  nomeSnapshot          String
  precoUnitarioSnapshot Decimal @db.Decimal(10, 2)
  quantidade            Int
  subtotal              Decimal @db.Decimal(10, 2)

  Pedido  Pedido  @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  Produto Produto @relation(fields: [produtoId], references: [id], onDelete: Cascade)
}

model Pagamento {
  id          String          @id @default(uuid())
  pedidoId    String          @unique
  metodo      String
  status      PagamentoStatus @default(PENDENTE)
  transacaoId String?

  Pedido Pedido @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
}

model Carrinho {
  id        String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User         User           @relation(fields: [id], references: [id])
  CarrinhoItem CarrinhoItem[]
}

model CarrinhoItem {
  id                      String  @id @default(uuid())
  quantidade              Int     @default(1)
  preco_unitario_snapshot Decimal @db.Decimal(10, 2)
  subtotal                Decimal @db.Decimal(10, 2)

  ID_CARRINHO String
  Carrinho    Carrinho @relation(fields: [ID_CARRINHO], references: [id])

  ID_PRODUTO String
  Produto    Produto @relation(fields: [ID_PRODUTO], references: [id], onDelete: Cascade)

  @@unique([ID_CARRINHO, ID_PRODUTO])
}

enum Role {
  ADMIN
  VENDEDOR
  CLIENTE
}

enum PedidoStatus {
  CRIADO
  EM_PROCESSAMENTO
  ENVIADO
  ENTREGUE
}

enum PagamentoStatus {
  PENDENTE
  APROVADO
  RECUSADO
}
